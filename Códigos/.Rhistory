alpha_500 <- 0.5
scale_1 <- 1000
scale_2 <- 10
#Ploting the gamma distribution with different parameter values
par(mfrow = c(1,3))
#curve() draws a curve corresponding to a function
curve(dgamma(x, shape = alpha_1, scale = scale_1), 0, 10, ylim = c(0, .1),
main = "Gamma priors", cex.axis = 1.2, cex.lab = 1.5, lwd = 2,
ylab = "Density", xlab = expression(tau))
curve(dgamma(x, shape = alpha_2, scale = scale_1), col = 2, lwd = 2, add = TRUE)
curve(dgamma(x, shape = alpha_5, scale = scale_1), col = 3, lwd = 2, add = TRUE)
curve(dgamma(x, shape = alpha_10, scale = scale_1), col = 4, lwd = 2, add = TRUE)
curve(dgamma(x, shape = alpha_100, scale = scale_1), col = 6, lwd = 2, add = TRUE)
legend(x = "topright", legend = c(
expression(alpha == 0.001),
expression(alpha == 0.002),
expression(alpha == 0.005),
expression(alpha == 0.01),
expression(alpha == 0.1)),
col = c(1, 2, 3, 4, 6), bty = "n", cex = 1.1, lwd = 2
)
curve(dgamma(x, shape = 10, scale = 1), 0, 10, ylim = c(0, .25),
main = "Gamma priors", cex.axis = 1.2, cex.lab = 1.5, lwd = 2,
ylab = "Density", xlab = expression(tau))
curve(dgamma(x, shape = 9, scale = 1), col = 12, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 5, scale = 1), col = 13, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 4, scale = 1), col = 14, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 3, scale = 1), col = 15, lwd = 2, add = TRUE)
legend(x = "topright", legend = c(
expression(alpha == 0.001),
expression(alpha == 0.002),
expression(alpha == 0.005),
expression(alpha == 0.01),
expression(alpha == 0.1)),
col = c(1, 2, 3, 4, 6), bty = "n", cex = 1.1, lwd = 2
)
curve(dgamma(x, shape = alpha_1, scale = scale_1), 0, 10, ylim = c(0, 1),
main = "Gamma priors", cex.axis = 1.2, cex.lab = 1.5, lwd = 2,
ylab = "Density", xlab = expression(tau))
curve(dgamma(x, shape = 1000, scale = 0.09), col = 13, lwd = 2, add = TRUE)
# par() is used for puting multiple graphs in a single plot
alpha_1 <- 0.001
alpha_2 <- 0.002
alpha_5 <- 0.005
alpha_10 <- 0.01
alpha_100 <- 0.1
alpha_500 <- 0.5
scale_1 <- 1000
scale_2 <- 10
#Ploting the gamma distribution with different parameter values
par(mfrow = c(1,3))
#curve() draws a curve corresponding to a function
curve(dgamma(x, shape = alpha_1, scale = scale_1), 0, 10, ylim = c(0, .1),
main = "Gamma priors", cex.axis = 1.2, cex.lab = 1.5, lwd = 2,
ylab = "Density", xlab = expression(tau))
curve(dgamma(x, shape = alpha_2, scale = scale_1), col = 2, lwd = 2, add = TRUE)
curve(dgamma(x, shape = alpha_5, scale = scale_1), col = 3, lwd = 2, add = TRUE)
curve(dgamma(x, shape = alpha_10, scale = scale_1), col = 4, lwd = 2, add = TRUE)
curve(dgamma(x, shape = alpha_100, scale = scale_1), col = 6, lwd = 2, add = TRUE)
legend(x = "topright", legend = c(
expression(alpha == 0.001),
expression(alpha == 0.002),
expression(alpha == 0.005),
expression(alpha == 0.01),
expression(alpha == 0.1)),
col = c(1, 2, 3, 4, 6), bty = "n", cex = 1.1, lwd = 2
)
curve(dgamma(x, shape = 10, scale = 1), 0, 10, ylim = c(0, .25),
main = "Gamma priors", cex.axis = 1.2, cex.lab = 1.5, lwd = 2,
ylab = "Density", xlab = expression(tau))
curve(dgamma(x, shape = 9, scale = 1), col = 12, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 5, scale = 1), col = 13, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 4, scale = 1), col = 14, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 3, scale = 1), col = 15, lwd = 2, add = TRUE)
legend(x = "topright", legend = c(
expression(alpha == 0.001),
expression(alpha == 0.002),
expression(alpha == 0.005),
expression(alpha == 0.01),
expression(alpha == 0.1)),
col = c(1, 2, 3, 4, 6), bty = "n", cex = 1.1, lwd = 2
)
curve(dgamma(x, shape = alpha_1, scale = scale_1), 0, 10, ylim = c(0, 1),
main = "Gamma priors", cex.axis = 1.2, cex.lab = 1.5, lwd = 2,
ylab = "Density", xlab = expression(tau))
curve(dgamma(x, shape = 100, scale = 0.09), col = 13, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 100, scale = 0.1), col = 13, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 100, scale = 0.2), col = 13, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 100, scale = 0.3), col = 13, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 90, scale = 0.3), col = 13, lwd = 2, add = TRUE)
curve(dgamma(x, shape = 70, scale = 0.3), col = 13, lwd = 2, add = TRUE)
#Trying to reproduce the example from https://rdrr.io/cran/phylodyn/f/vignettes/SimplePhyloinfer.Rmd
library(phylodyn)
#Suppose that the true effective population size trajectory function has exponential growth
trajectory = exp_traj(2)
samp_times = 0
#100 individuals in the sample
n = 100
#Simulating a genealogy based on the sample
#The following line has an error:
#Error in traj(t, ...) : não foi possível encontrar a função "traj"
gene = coalsim(samp_times = samp_times, n_sampled = n, traj = trajectory, lower_bound = 1/10)
#Using BNPR to calculate approximate marginals
#BNPR means Bayesian nonparametric phylodynamic reconstruction.
res_BNPR  = BNPR(data = gene, lengthout = 100)
nsamp = 500
nburnin = 100
res_MCMC = mcmc_sampling(data = gene, alg = 'splitHMC', nsamp = nsamp,
nburnin = nburnin)
# Plot the results of BNPR
plot_BNPR(BNPR_out = res_BNPR, traj = exp_traj, col = "blue", traj_col = "black")
title("Exponential growth")
# Plot the results of splitHMC
lines(res_MCMC$med_fun, pch="", col='red', lwd=1)
lines(res_MCMC$low_fun, pch="", col='red', lwd=1, lty=1)
lines(res_MCMC$hi_fun,  pch="", col='red', lwd=1, lty=1)
legend('topleft',c('Truth','BNPR',"splitHMC"),
col=c('black','blue','red'),lwd=c(1,2.5,2.5),bty='n', lty=c(2,1,1))
#Suppose that the true effective population size trajectory function has exponential growth
trajectory = exp_traj(2)
samp_times = 0
#100 individuals in the sample
n = 100
#Simulating a genealogy based on the sample
#The following line has an error:
#Error in traj(t, ...) : não foi possível encontrar a função "traj"
gene = coalsim(samp_times = samp_times, n_sampled = n, traj = trajectory, lower_bound = 1/10)
args(coalsim)
sessioninfo()
sessioninfo()
sessionout()
sessionout()
#Trying to reproduce the example from https://rdrr.io/cran/phylodyn/f/vignettes/SimplePhyloinfer.Rmd
library(phylodyn)
#Suppose that the true effective population size trajectory function has exponential growth
trajectory = exp_traj
samp_times = 0
#100 individuals in the sample
n = 100
#Simulating a genealogy based on the sample
#The following line has an error:
#Error in traj(t, ...) : não foi possível encontrar a função "traj"
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
#Using BNPR to calculate approximate marginals
#BNPR means Bayesian nonparametric phylodynamic reconstruction.
res_BNPR  = BNPR(data = gene, lengthout = 100)
sessionout()
library(phylodyn)
trajectory = exp_traj
samp_times = 0
n = 100
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
res_BNPR  = BNPR(data = gene, lengthout = 100)
sessionInfo()
update.packages(ask = FALSE, checkBuilt = TRUE)
library(phylodyn)
i
install.packages(ape)
install.packages('ape')
install.packages('spam')
install.packages('devtools')
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(devtools)
install_github("mdkarcher/phylodyn", build_vignettes = TRUE)
install_github("mdkarcher/phylodyn", build_vignettes = TRUE)
library(devtools)
install_github("mdkarcher/phylodyn", build_vignettes = TRUE)
devtools::install_github("maxbiostat/phylodyn", ref = "new_pc_prior")
library(phylodyn)
trajectory = exp_traj
samp_times = 0
n = 100
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
res_BNPR  = BNPR(data = gene, lengthout = 100)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE).
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
gene
res_BNPR  = BNPR(data = gene, lengthout = 100)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
sessionInfo()
res_BNPR  = BNPR(data = gene, lengthout = 100)
install.packages('Rgraphviz')
install.packages('graph')
install.packages('gmp')
install.packages('units')
install.packages('partitions')
install.packages('sf')
install.packages('mpoly')
install.packages('rgdal')
install.packages('rgeos')
install.packages('spdep')
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
res_BNPR  = BNPR(data = gene, lengthout = 100)
install.packages("Rfast")
library(Rfast)
install.packages("Rfast")
library(Rfast)
install.packages("RcppGSL")
library(RcppGSL)
library(RcppGSL)
install.packages("Rfast")
install.packages("RcppGSL")
gene
#Simulating with a fixed value for tau
library(phylodyn)
library(gg3D)
library(ggplot2)
library(latex2exp)
library(RandomFields)
tau <- 2
trajectory = exp_traj
samp_times = 0
n = 10
#Simulating a genealogy based on the sample
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
model <- RMexp(var=5, scale=10) + # with variance 4 and scale 10
RMnugget(var=1) + # nugget
RMtrend(mean=0.5) # and mean
## define the locations:
from <- 0
to <- 20
x.seq <- seq(from, to, length=200)
y.seq <- seq(from, to, length=200)
simu <- RFsimulate(model, x=x.seq, y=y.seq)
plot(simu)
#############################################################
## ##
## Conditional simulation ##
## ##
#############################################################
# first we simulate some random values at
# 100 random locations:
n <- 100
x <- runif(n=n, min=-1, max=1)
y <- runif(n=n, min=-1, max=1)
dta <- RFsimulate(model = RMexp(), x=x, y=y, grid=FALSE)
plot(dta)
# let simulate a field conditional on the above data
L <- if (interactive()) 100 else 5
x.seq.cond <- y.seq.cond <- seq(-1.5, 1.5, length=L)
model <- RMexp()
cond <- RFsimulate(model, x=x.seq.cond, y=y.seq.cond, data=dta)
plot(cond, dta)
gene
gene$intercoal_times
gene
gene$intercoal_timessamp_times
gene$samp_times
gene$coal_times
install.packages("Rfast")
midpoint_distance = (gene$ (1:end-1) + gene_intercoal(2:end))/2;
#Simulating with a fixed value for tau
library(phylodyn)
library(ggplot2)
library(latex2exp)
library(RandomFields)
tau <- 2
trajectory = exp_traj
samp_times = 0
n = 100
#Simulating a genealogy based on the sample
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
k <- n - 1
midpoint_distance = (gene$intercoal_times(1:end-1) + gene$intercoal_times(2:end))/2;
midpoint_distance <- (gene$intercoal_times(1:end-1) + gene$intercoal_times(2:end))/2;
gene$intercoal_times[1]
gene$intercoal_times[1:end]
gene$intercoal_times[1:-1]
gene$intercoal_times[1:]
gene$intercoal_times[1:9]
gene$intercoal_times[1:10]
gene$intercoal_times
midpoint_distance <- (gene$intercoal_times[1:k-1] + gene$intercoal_times[2:k])/2;
midpoint_distance
ones(1)
gene_intercoal1 <- replicate(k, 1)./gene_intercoal'
gene_intercoal1 <- replicate(k, 1)./gene$intercoal_times
gene_intercoal1 <- replicate(k, 1)/gene$intercoal_times
gene_intercoal1
replicate(2,1)
diag <- c(gene_intercoal1(1), gene_intercoal1[1:k-2] + gene_intercoal1[2:k-1], gene_intercoal1(end-1))
gene_intercoal1 <- replicate(k, 1)/gene$intercoal_times
diag <- c(gene_intercoal1(1), gene_intercoal1[1:k-2] + gene_intercoal1[2:k-1], gene_intercoal1(end-1))
gene_intercoal1 <- replicate(k, 1)/gene$intercoal_times
gene_intercoal1[1]
diag <- c(gene_intercoal1[1], gene_intercoal1[1:k-2] + gene_intercoal1[2:k-1], gene_intercoal1[k-1])
diag <- c(gene_intercoal1[1], gene_intercoal1[1:(k-2)] + gene_intercoal1[2:(k-1)], gene_intercoal1[k-1])
diag
#Simulating with a fixed value for tau
library(phylodyn)
library(gg3D)
library(ggplot2)
library(latex2exp)
library(Matrix)
tau <- 2
trajectory = exp_traj
samp_times = 0
n = 100
#Simulating a genealogy based on the sample
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
k <- n - 1
midpoint_distance <- (gene$intercoal_times[1:k-1] + gene$intercoal_times[2:k])/2
gene_intercoal1 <- replicate(k, 1)/gene$intercoal_times
diag <- c(gene_intercoal1[1], gene_intercoal1[1:(k-2)] + gene_intercoal1[2:(k-1)], gene_intercoal1[k-1])
Q1D     <- tau1*spdiags([[-one_vec; 0] diag -[0; one_vec]],[-1 0 1],k,k)
L       <- chol(Q1D)
v       <- randn(k,5)
samps   <- L\v
Q1D     <- tau*Diagonal(diag)
Q1D     <- tau*Diagonal(x = diag)
Q1D
transProbs = matrix(0, nrow = 4, ncol = 4)
transProbs
diag(transProbs[,-1]) = 0.5
transProbs
transProbs[,-1]
transProbs[2,]
transProbs[2, :]
transProbs[,2:]
transProbs[, 2:-1]
transProbs[, 2:4]
transProbs[, 2:-1]
transProbs[,-1]
diag[,-1]
Q1D[,-1]
transProbs[,-1]
transProbs = matrix(0, nrow = 4, ncol = 4)
transProbs[,-1]
transProbs[,-1] = [1 2 3]
transProbs[,-1] = c(1, 2, 3)
transProbs
v <- matrix( rnorm(k*k,mean=0,sd=1), k, k)
v
n = 4
#Simulating with a fixed value for tau
library(phylodyn)
library(gg3D)
library(ggplot2)
library(latex2exp)
library(Matrix)
tau <- 2
trajectory = exp_traj
samp_times = 0
n = 4
#Simulating a genealogy based on the sample
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
k <- n - 1
midpoint_distance <- (gene$intercoal_times[1:k-1] + gene$intercoal_times[2:k])/2
gene_intercoal1 <- replicate(k, 1)/gene$intercoal_times
diag <- c(gene_intercoal1[1], gene_intercoal1[1:(k-2)] + gene_intercoal1[2:(k-1)], gene_intercoal1[k-1])
Q1D     <- Diagonal(x = diag)
L       <- chol(Q1D)
v       <- randn(k,5)
v <- matrix( rnorm(k*k,mean=0,sd=1), k, k)
samps   <- L\v
v
samps   <- solve(L,v)
samps
#Simulating with a fixed value for tau
library(phylodyn)
library(gg3D)
library(ggplot2)
library(latex2exp)
library(Matrix)
tau <- 2
trajectory = exp_traj
samp_times = 0
n = 4
#Simulating a genealogy based on the sample
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
k <- n - 1
midpoint_distance <- (gene$intercoal_times[1:k-1] + gene$intercoal_times[2:k])/2
gene_intercoal1 <- replicate(k, 1)/gene$intercoal_times
diag <- c(gene_intercoal1[1], gene_intercoal1[1:(k-2)] + gene_intercoal1[2:(k-1)], gene_intercoal1[k-1])
Q1D     <- Diagonal(x = diag)
L       <- chol(Q1D)
v <- matrix( rnorm(k*k,mean=0,sd=1), k, k)
samps   <- solve(L,v)
plot(gene$coal_times, samps)
samps
plot(gene$coal_times, samps[,1])
lines(gene$coal_times, samps[,1])
#Simulating with a fixed value for tau
library(phylodyn)
library(ggplot2)
library(latex2exp)
library(Matrix)
tau <- 2
trajectory = exp_traj
samp_times = 0
n = 100
#Simulating a genealogy based on the sample
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
k <- n - 1
midpoint_distance <- (gene$intercoal_times[1:k-1] + gene$intercoal_times[2:k])/2
gene_intercoal1 <- replicate(k, 1)/gene$intercoal_times
diag <- c(gene_intercoal1[1], gene_intercoal1[1:(k-2)] + gene_intercoal1[2:(k-1)], gene_intercoal1[k-1])
Q1D <- Diagonal(x = diag)
L <- chol(Q1D)
v <- matrix( rnorm(k*k,mean=0,sd=1), k, k)
samps   <- solve(L,v)
lines(gene$coal_times, samps[,1])
#Simulating with a fixed value for tau
library(phylodyn)
library(ggplot2)
library(latex2exp)
library(Matrix)
tau <- 2
trajectory = exp_traj
samp_times = 0
n = 100
#Simulating a genealogy based on the sample
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
k <- n - 1
midpoint_distance <- (gene$intercoal_times[1:k-1] + gene$intercoal_times[2:k])/2
gene_intercoal1 <- replicate(k, 1)/gene$intercoal_times
diag <- c(gene_intercoal1[1], gene_intercoal1[1:(k-2)] + gene_intercoal1[2:(k-1)], gene_intercoal1[k-1])
Q1D <- Diagonal(x = diag)
L <- chol(Q1D)
v <- matrix( rnorm(k*k,mean=0,sd=1), k, k)
samps   <- solve(L,v)
lines(gene$coal_times, samps[,1])
plot()
plot()
lines(gene$coal_times, samps[,1])
plot((gene$coal_times, samps[,1])
plot(gene$coal_times, samps[,1])
plot(gene$coal_times, samps[,1], type = 'n')
plot(gene$coal_times, samps[,1], type = 'l')
#Simulating with a fixed value for tau
library(phylodyn)
library(ggplot2)
library(latex2exp)
library(Matrix)
tau <- 2
trajectory = exp_traj
samp_times = 0
n = 1000
#Simulating a genealogy based on the sample
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
k <- n - 1
midpoint_distance <- (gene$intercoal_times[1:k-1] + gene$intercoal_times[2:k])/2
gene_intercoal1 <- replicate(k, 1)/gene$intercoal_times
diag <- c(gene_intercoal1[1], gene_intercoal1[1:(k-2)] + gene_intercoal1[2:(k-1)], gene_intercoal1[k-1])
Q1D <- Diagonal(x = diag)
L <- chol(Q1D)
v <- matrix( rnorm(k*k,mean=0,sd=1), k, k)
samps   <- solve(L,v)
plot(gene$coal_times, samps[,1], type = 'l')
#Simulating with a fixed value for tau
library(phylodyn)
library(ggplot2)
library(latex2exp)
library(Matrix)
tau <- 2
trajectory = exp_traj
samp_times = 0
n = 200
#Simulating a genealogy based on the sample
gene = coalsim(samp_times = samp_times, n_sampled = n,
traj = trajectory, lower_bound = 1/10)
k <- n - 1
midpoint_distance <- (gene$intercoal_times[1:k-1] + gene$intercoal_times[2:k])/2
gene_intercoal1 <- replicate(k, 1)/gene$intercoal_times
diag <- c(gene_intercoal1[1], gene_intercoal1[1:(k-2)] + gene_intercoal1[2:(k-1)], gene_intercoal1[k-1])
Q1D <- Diagonal(x = diag)
L <- chol(Q1D)
v <- matrix( rnorm(k*k,mean=0,sd=1), k, k)
samps   <- solve(L,v)
plot(gene$coal_times, samps[,1], type = 'l')
library(ggplot2)
library(phylodyn)
date_min <- 1990
date_max <- 2021
const10 <- function(x){
return(rep(10, length(x)))
}
nrep <- 500
#Uniform distribution - 20 observations
stimes20 <- sort(runif(20, date_min, date_max))
#Genealogies
#(taxa — pl.) Any named group of organisms (e.g., the reptiles, Felidae, beetles, Homo sapiens).
genealogies_20taxa <- lapply(1:nrep, function(i){
phylodyn::coalsim(samp_times = stimes20,
n_sampled = rep(1,20),
traj = const10,
lower_bound = 1)
})
#200 taxa
stimes200 <- sort(runif(200, date_min, date_max))
genealogies_200taxa <- lapply(1:nrep, function(i){
phylodyn::coalsim(samp_times = stimes200,
n_sampled = rep(1,200),
traj = const10,
lower_bound = 1)
})
#Phylodynamic reconstruction of effective population size - 20 taxa
system.time(
reconstructions_20taxa_gamma <- lapply(genealogies_20taxa, function(x)
BNPR(data = x, lengthout =100))
)
